(println "cenas")
(def spacecraft #{:x-wing :y-wing :tie-fighter})
spacecraft
(#{:jj :ms} :jj)
(#{:jj :ms} :ag)
(doc str)
(apropos-better "count")
(apropos-better "string")
(string? "ldad")
(string? :l)
(string 2)
(string? 2)
(defn big [st n]
  (and (string? st) (> (count st) n)))
(big "ola" 3)
(big "ola" 2)
(big 1 2)
(apropos-better "cond")
(map? {:m 2})
(list? '(1 2 3))
(apropos-better "type")
(doc type)
(type (list 1 2))
(type '(1 2))
(doc "cond")
(doc cond)
(defn collection-type [col]
  (cond ([map? col] :map)))
(defn collection-type [col]
  (cond ([map? col] :map
         [list? col] :list)))
(defn collection-type [col]
  (cond ((map? col) :map
         (list? col) :list
         (vector? col) :vector)))
(defn collection-type [col]
  (cond (map? col) :map
         (list? col) :list
         (vector? col) :vector))
(collection-type (list 1 2))
(collection-type '())
(collection-type (vector 1 2 3))
(collection-type {:h 1 :c 2})
(doc cond)
(doc loop)
(doc recur)
